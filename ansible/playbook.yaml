---
- hosts: all
  vars_files:
    - external_variables.yaml
  tasks:
    - name: Update hostname
      hostname:
        name: "{{ ansible_hostname }}"
    - name: Update /etc/hosts file
      template:
        src:    templates/etc_hosts.j2
        dest:   /etc/hosts
        owner:  root
        group:  root
        mode:   0644

- hosts: k8s
  vars_files:
    - external_variables.yaml
  tasks:
    - name: Create Kubernetes repo
      template:
        src:    templates/kubernetes_repo.j2
        dest:   /etc/yum.repos.d/kubernetes.repo
        owner:  root
        group:  root
        mode:   0644
    - name: Ensure proxies are set for K8s
      template:
        src:    templates/etc_profile_d_proxy_sh.j2
        dest:   /etc/profile.d/proxy.sh
        owner:  root
        group:  root
        mode:   0644
    - name: Ensure bridge-nf-call exists for K8s
      sysctl:
        name: "{{ item.option }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/bridge-nf-call.conf
      with_items:
        - option: net.bridge.bridge-nf-call-iptables
          value: 1
        - option: net.bridge.bridge-nf-call-ip6tables
          value: 1
        - option: net.bridge.bridge-nf-call-arptables
          value: 1
    - name: Install Docker packages
      package:
        name:  "{{ item }}"
        state: present
      with_items:
        - docker-1.12.6-16.el7.centos
    - name: Ensure Docker systemd directory exists
      file:
        path:   /etc/systemd/system/docker.service.d
        state:  directory
    - name: Configure Docker - systemd
      template:
        src:    templates/docker_service_d_50_http_proxy.j2
        dest:   /etc/systemd/system/docker.service.d/50-http-proxy.conf
        owner:  root
        group:  root
        mode:   0644
      notify: Restart Docker service
    - name: Configure Docker - sysconfig/docker
      template:
        src:    templates/docker_sysconfig_docker.j2
        dest:   /etc/sysconfig/docker
        owner:  root
        group:  root
        mode:   0644
      notify: Restart Docker service
    - name: Configure Docker - sysconfig/docker-storage-setup
      template:
        src:    templates/docker_sysconfig_docker_storage_setup.j2
        dest:   /etc/sysconfig/docker-storage-setup
        owner:  root
        group:  root
        mode:   0644
      notify: Restart Docker service
    - name: Enable Docker service
      service:
        name:    docker
        state:   started
        enabled: yes
    - name: Install K8s node packages
      package:
        name:   "{{ item }}"
        state:  present
      with_items:
        - "kubelet-{{ k8s_version }}"
        - "kubectl-{{ k8s_version }}"
        - "kubeadm-{{ k8s_version }}"
    - name: Enable K8s service
      service:
        name:    kubelet
        state:   started
        enabled: yes
    # - name: Download latest calicoctl binary
    #   get_url:
    #     url: https://github.com/projectcalico/calicoctl/releases/download/v{{ calicoctl_version }}/calicoctl
    #     dest: /usr/bin
    #     owner: root
    #     group: root
    #     mode: 0500
    # - name: Create calico directories
    #   file:
    #     path: "{{ item }}"
    #     state: directory
    #     owner: root
    #     group: root
    #   with_items:
    #     - /etc/calico
    #     - /var/log/calico
    # - name: Create calicoctl configuration - /etc/calico/calicoctl.cfg   
    #   template:
    #     src:    templates/calicoctl_cfg.j2
    #     dest:   /etc/calico/calicoctl.cfg
    #     owner:  root
    #     group:  root
    #     mode:   0600
  handlers:
    - name: Restart Docker service
      service:
        name:  docker
        state: restarted
    - name: Restart K8s service
      service:
        name:  kubelet
        state: restarted

- hosts: etcd
  vars_files:
    - external_variables.yaml
  tasks:
    - name: Install ETCD package
      package:
        name:  "{{ item }}"
        state: present
      with_items:
        - etcd
    - name: Configure ETCD service
      template:
        src:    templates/etcd_conf.j2
        dest:   /etc/etcd/etcd.conf
        owner:  root
        group:  root
        mode:   0644
      notify: Restart ETCD service
    - name: Enable ETCD service
      service:
        name:    etcd
        state:   started
        enabled: yes
  handlers:
    - name: Restart ETCD service
      service:
        name:  etcd
        state: restarted

- hosts: k8s_master
  vars_files:
    - external_variables.yaml
  tasks:
    - name: Configure K8s - kubeadm
      template:
        src:    templates/kubeadm_config_yaml.j2
        dest:   /root/kubeadm-config.yaml
        owner:  root
        group:  root
        mode:   0644
    # - name: Configure K8s - Calico
    #   template:
    #     src:    templates/calico_networks_yaml.j2
    #     dest:   /root/calico-networks.yaml
    #     owner:  root
    #     group:  root
    #     mode:   0644
    - name: Create K8s Flannel RBAC configuration
      template:
        src:    templates/kube_flannel_rbac_yml.j2
        dest:   /root/kube-flannel-rbac.yml
        owner:  root
        group:  root
        mode:   0644
    - name: Create K8s Flannel configuration
      template:
        src:    templates/kube_flannel_yml.j2
        dest:   /root/kube-flannel.yml
        owner:  root
        group:  root
        mode:   0644
    # - name: Run kubeadm to initialize K8s
    #   shell: |
    #     kubeadm init --config kubeadm-config.yaml --pod-network-cidr=10.244.0.0/16 --skip-preflight-checks | grep 'kubeadm join' | xargs > k8s_join.sh
    #   args:
    #     chdir:   /root
    #     creates: k8s_join.sh
    - name: Register K8s node join command - k8s_join_command
      shell: |
        cat k8s_join.sh
      args:
        chdir:   /root
      register: k8s_join_command
    - name: Configure Restart K8s service - kube-controller-manager
      template:
        src:    templates/kube_controller_manager_yaml.j2
        dest:   /etc/kubernetes/manifests/kube-controller-manager.yaml
        owner:  root
        group:  root
        mode:   0644
      notify: Restart kubelet service
    - name: Ensure K8s kubectl directory exists
      file:
        path:   /root/.kube
        state:  directory
        owner:  root
        group:  root
        mode:   0500
    - name: Create K8s admin configuration - /root/.kube/config
      copy:
        src:    /etc/kubernetes/admin.conf
        dest:   /root/.kube/config
        owner:  root
        group:  root
        mode:   0700
        force:  yes
        remote_src: yes
    - name: Register K8s admin configuration - k8s_admin_config
      shell: |
        cat  /root/.kube/config
      args:
        chdir:   /root
      register: k8s_admin_config
    - name: Ensure K8s node join script exists
      copy:
        content: "#!/bin/bash\n{{ hostvars['kube-master'].k8s_join_command.stdout }} --skip-preflight-checks\n"
        dest:    /root/k8s_join.sh
        owner:   root
        group:   root
        mode:    0700
        force:   yes
    # - name: Create Calico networking
    #   shell: |
    #     kubectl apply -f /root/calico-networks.yaml > k8s_calico_networking.log
    #   args:
    #     chdir:   /root
    #     creates: k8s_calico_networking.log
    - name: Create Flannel networking
      shell: |
        ( kubectl apply -f /root/kube-flannel-rbac.yml
        kubectl apply -f /root/kube-flannel.yml ) > k8s_flannel_networking.log
      args:
        chdir:   /root
        creates: k8s_flannel_networking.log
  handlers:
    - name: Restart K8s service
      service:
        name:  kubelet
        state: restarted

- hosts: k8s_node
  vars_files:
    - external_variables.yaml
  tasks:
    - name: Ensure K8s node join script exists
      copy:
        content: "#!/bin/bash\n{{ hostvars['kube-master'].k8s_join_command.stdout }} --skip-preflight-checks\n"
        dest:    /root/k8s_join.sh
        owner:   root
        group:   root
        mode:    0700
        force:   yes
    - name: Join nodes to K8s
      shell: |
        /root/k8s_join.sh > k8s_node_join.log
      args:
        chdir:   /root
        creates: k8s_node_join.log


- hosts: k8s_admin
  vars_files:
    - external_variables.yaml
  tasks:
    - name: Create Kubernetes repo
      template:
        src:    templates/kubernetes_repo.j2
        dest:   /etc/yum.repos.d/kubernetes.repo
        owner:  root
        group:  root
        mode:   0644
    - name: Ensure proxies are set for K8s
      template:
        src:    templates/etc_profile_d_proxy_sh.j2
        dest:   /etc/profile.d/proxy.sh
        owner:  root
        group:  root
        mode:   0644
    - name: Ensure etcd endpoints are set
      template:
        src:    templates/etc_profile_d_etcd_endpoints_sh.j2
        dest:   /etc/profile.d/etcd_endpoints.sh
        owner:  root
        group:  root
        mode:   0644
    - name: Install K8s kubectl
      package:
        name:     "{{ item }}"
        state: present
      with_items:
        - "kubectl-{{ k8s_version }}"
    - name: Ensure K8s kubectl directory exists
      file:
        path:   /root/.kube
        state:  directory
        owner:  root
        group:  root
        mode:   0500
    - name: Create K8s admin configuration - /root/.kube/config
      copy:
        content: "{{ hostvars['kube-master'].k8s_admin_config.stdout }}\n"
        dest:    /root/.kube/config
        owner:   root
        group:   root
        mode:    0700
        force:   yes
    # - name: Download latest calicoctl binary
    #   get_url:
    #     url: https://github.com/projectcalico/calicoctl/releases/download/v{{ calicoctl_version }}/calicoctl
    #     dest: /usr/bin
    #     owner: root
    #     group: root
    #     mode: 0500
    # - name: Create calico directories
    #   file:
    #     path: "{{ item }}"
    #     state: directory
    #     owner: root
    #     group: root
    #   with_items:
    #     - /etc/calico
    #     - /var/log/calico
    # - name: Create calicoctl configuration - /etc/calico/calicoctl.cfg   
    #   template:
    #     src:    templates/calicoctl_cfg.j2
    #     dest:   /etc/calico/calicoctl.cfg
    #     owner:  root
    #     group:  root
    #     mode:   0600
